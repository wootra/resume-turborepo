---
import { twMerge } from 'tailwind-merge';
import ContentHolder from '@/layouts/sublayouts/ContentHolder.astro';
import Nav from '@/components/links/Nav.astro';
import AppLayout from '@/layouts/AppLayout.astro';
import PortfolioLayout from '@/layouts/sublayouts/PortfolioLayout.astro';
import { Icon } from 'astro-icon/components'
import SourceRenderer from '@/utils/SourceRenderer.astro';
import SpaceSeparator from '@/layouts/sublayouts/SpaceSeparator.astro';
const colorThemes = [
	[
		twMerge('from-slate-700/70 to-slate-500/50'),
		twMerge('bg-slate-200/50'),
		twMerge('to-slate-700/50 from-slate-500/30')
	],
	[
		twMerge('from-red-700/70 to-red-500/50'),
		twMerge('bg-red-200/50'),
		twMerge('to-red-700/50 from-red-500/30')
	],
	[
		twMerge('from-cyan-700/70 to-cyan-500/50'),
		twMerge('bg-cyan-200/50'),
		twMerge('to-cyan-700/50 from-cyan-500/30')
	],
	[
		twMerge('from-lime-700/70 to-lime-500/50'),
		twMerge('bg-lime-200/50'),
		twMerge('to-lime-700/50 from-lime-500/30')
	]
];
const bgThemes = [
	"gray", 
	"rgb(206, 157, 199)",
	"rgb(166, 173, 188)",
	"rgb(174, 161, 19)",
]

const portfolios = [
	{
		id:'3d-samples',
		title: 'Three.js Samples',
		techStacks: 'React.js 18, Three.js',
		desc: 'A toy projects to play with three.js and 3D algorithms.',
		href: "/games/threejs",
		src: "/images/app-screenshots/threejs.png",
		github: "https://github.com/wootra/react-svg-designer",
	},
	{
		id:'svg-designer',
		title: 'SVG Designer',
		techStacks: 'React.js 16, SVG, Canvas',
		desc: 'A simple tool to create SVG image on Web.',
		href: "https://svg-designer-snowy.vercel.app/",
		src: "/images/app-screenshots/svg-designer.png",
		github: "https://github.com/wootra/react-svg-designer",
	},
	{
		id:'todo-list',
		title: 'HTMX Todo list',
		techStacks: 'HTMX',
		desc: 'A toy project to play with HTMX',
		href: "/apps/todo-list",
		src: "/images/app-screenshots/todo-list.png",
		github: 'https://github.com/wootra/resume-turborepo/tree/main/apps/astro-resume/src/components/app-comps/todo-list',
	},
	{
		id:'horse-shoe-chart',
		title: 'Horse Shoe chart',
		techStacks: 'common.js, React.js',
		desc: `I could not find the exact shape of chart component to show horse shoe shape that I needed to use.
		So I made one.`,
		videoSrc: "/images/app-screenshots/horseshoe.mp4",
		gitlab: 'https://gitlab.com/shjeon0730/horseshoe-chart',
		npm: 'https://www.npmjs.com/package/@shjeon0730/horseshoe-chart',
	},
	{
		id:'svg-gen-util',
		title: 'Svg Gen Util',
		techStacks: 'common.js, React.js',
		desc: `While I was making horseshoe chart, I thought it would be great for me to modularize this svg generation functionality.
		I made it as a separated module. It was great experience to make a new npm package and learning SVG.`,
		src: "/images/app-screenshots/svg-gen-util.png",
		href: 'https://www.npmjs.com/package/@shjeon0730/svg-gen-utils',
		gitlab: 'https://gitlab.com/shjeon0730/svg-gen-utils',
		npm: 'https://www.npmjs.com/package/@shjeon0730/svg-gen-utils',
	},
	{
		id:'snake-game',
		title: 'Snake Game',
		techStacks:"Solid.js, Canvas", 
		desc: 'A Simple toy project to test AI generated code. I hade to make a lot of adjustments to fix the bugs for many different situation.',
		href: "/games/snake",
		src: "/images/app-screenshots/snake-game.png",
		github: 'https://github.com/wootra/resume-turborepo/tree/main/apps/astro-resume/src/components/games/solid-games/SnakeGame',
	},
	{
		id:'spot-it-game',
		title: 'Spot It! Game',
		techStacks: 'Solid.js',
		desc: 'Reproduction of a famous board game Spot It. Algorithm of the game is extremly complex. It took a lot of time for me to figure out the algorithm of the game.',
		href: "/games/spot-it",
		src: "/images/app-screenshots/spot-it.png",
		github: 'https://github.com/wootra/resume-turborepo/tree/main/apps/astro-resume/src/components/games/solid-games/SpotIt'
	},
	
];

---
<AppLayout title="home" backText='Home' backUrl='/'>
	<div class="w-[100vw] min-h-[100vh] flex flex-col snap-y snap-mandatory">
		{portfolios.map((item, idx)=>{
			const {id, href, src, title, desc, techStacks, github, gitlab, npm, videoSrc} = item;
			const bgColor = bgThemes[idx% bgThemes.length];
			const colorTheme = colorThemes[idx % colorThemes.length];
			const before = idx === 0? undefined : `#${portfolios[idx-1].id}`;
			const after = `#${portfolios[(idx+1)%portfolios.length].id}`;
			return (

				<ContentHolder
					anchorId={id}
					classNames={colorTheme}
					before={before}
					after={after}
					bgColor={bgColor}
					bgImage="/images/game-back.jpg"
				> 
					{
						idx === 0 && <Nav slot="nav-area" className="absolute pl-[2rem] top-0 right-0 rounded-bl-[3rem] bg-white/30 z-50 py-2"/>
					}
					<PortfolioLayout>
						<h1 class="text-3xl flex flex-row gap-2">
							<SpaceSeparator>{title}</SpaceSeparator>
							
							<SourceRenderer 
								github={github}
								gitlab={gitlab}
								npm={npm}
							/>
							
						</h1>

						<section>
							<h2 class="text-lg text-slate-300">Tech stacks</h2>
							<p class="text-sm">{techStacks} </p>
						</section>
						
						<section class="text-sm">  
							<h2 class="text-lg text-slate-300">Description</h2>
							<p class="text-sm">{desc}</p>
						</section>
						
							
							
					</PortfolioLayout>
					{href && src && (
						<a href={href} target="_blank" slot="image-area" >
							<img alt="profile" src={src} class="flex-shrink rounded-lg max-w-[400px] max-h-[400px] w-full lg:h-auto h-auto px-4 aspect-1 object-contain" />
						</a>
					)}
					{videoSrc && (
						<embed slot="image-area" width="400" height="300" src={videoSrc} class="flex-shrink w-full px-4 object-contain" />
					)}
				</ContentHolder>
			)
		})}
	</div>
</AppLayout>
