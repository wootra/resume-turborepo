---
import ContentHolder from '@/layouts/sublayouts/ContentHolder.astro';
import Nav from '@/components/links/Nav.astro';
import AppLayout from '@/layouts/AppLayout.astro';
import ImageLinkRenderer from '@/utils/ImageLinkRenderer.astro';
import GotoTopLink from '@/utils/GotoTopLink.astro';
import PortfolioContents from '@/components/portfolio/PortfolioContents.astro';
import {bgThemes, colorThemes, portfolios, portfoliosInKr} from '@/components/portfolio/consts';
---
<AppLayout title="home" backText='Home' backUrl='/'>
	<div class="w-[100vw] min-h-[100vh] flex flex-col">
		
		{portfolios.map((item, idx)=>{
			const {id, src, title, desc, techStacks, devTechStacks, myRole, href, github,gitlab,npm} = item;
			const bgColor = bgThemes[idx% bgThemes.length];
			const colorTheme = colorThemes[idx % colorThemes.length];
			const before = idx === 0? undefined : `#${portfolios[idx-1].id}`;
			const after = idx === portfolios.length-1 ? `#${portfoliosInKr[0].id}` : `#${portfolios[(idx+1)].id}`;
			return (
				<ContentHolder
					anchorId={id}
					classNames={colorTheme}
					before={before}
					after={after}
					bgColor={bgColor}
					bgImage="/images/nasa-star-night.jpg"
				> 
					<header slot="location" class="absolute left-4 top-4 text-sm text-white/40">@US</header>
					{
						idx === 0 && <Nav slot="nav-area" className="absolute pl-[2rem] top-0 right-0 rounded-bl-[3rem] bg-white/30 z-50 py-2"/>
					}
					{ idx !== 0 && 
						<GotoTopLink slot="nav-area" href={`#${portfolios[0].id}`}/>
					}

					<PortfolioContents
						title={title}
						desc={desc}
						techStacks={techStacks}
						devTechStacks={devTechStacks}
						myRole={myRole}
						github={github}
						gitlab={gitlab}
						npm={npm}
					/>
					
					
					<ImageLinkRenderer slot="image-area" href={href} src={src} />
				</ContentHolder>
			)
		})}
		{portfoliosInKr.map((item, idx)=>{
			const {id, src, title, desc, techStacks, myRole, href, github, gitlab, npm} = item;
			const bgColor = bgThemes[idx% bgThemes.length];
			const colorTheme = colorThemes[idx % colorThemes.length];
			const before = idx === 0? `#${portfolios[portfolios.length-1].id}` : `#${portfoliosInKr[idx-1].id}`;
			const after = idx === portfoliosInKr.length-1 ? `#${portfolios[0].id}` : `#${portfoliosInKr[(idx+1)].id}`; 
			return (

				<ContentHolder
					anchorId={id}
					classNames={colorTheme}
					before={before}
					after={after}
					bgColor={bgColor}
					bgImage="/images/nasa-star-night.jpg"
				> 
				<header slot="location" class="absolute left-4 top-4 text-sm text-white/40">@KR</header>
					<GotoTopLink slot="nav-area" href={`#${portfolios[0].id}`}/>
					<PortfolioContents
						title={title}
						desc={desc}
						techStacks={techStacks}
						myRole={myRole}
						github={github}
						gitlab={gitlab}
						npm={npm}
					/>
					
					<ImageLinkRenderer slot="image-area" href={href} src={src} />
				</ContentHolder>
			)
		})}
	</div>
</AppLayout>