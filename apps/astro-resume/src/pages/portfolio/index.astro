---
import SanAntonioKoreanSchool from '@/components/portfolio/SanAntonioKoreanSchool.astro';
import DimensionalFundCenter from '@/components/portfolio/DimensionalFundCenter.astro';
import SmallBusinessInsurance from '@/components/portfolio/SmallBusinessInsurance.astro';
import FinancialReadiness from '@/components/portfolio/FinancialReadiness.astro';
import { twMerge } from 'tailwind-merge';
import ContentHolder from '@/layouts/sublayouts/ContentHolder.astro';
import Nav from '@/components/links/Nav.astro';
import AppLayout from '@/layouts/AppLayout.astro';
import AppHolder from '@/layouts/sublayouts/AppHolder.astro';
import PortfolioLayout from '@/layouts/sublayouts/PortfolioLayout.astro';
import ImageLinkRenderer from '@/utils/ImageLinkRenderer.astro';
import MultiLineParagraph from '@/layouts/sublayouts/MultiLineParagraph.astro';

const colorThemes = [
	[
		twMerge('from-slate-700/70 to-slate-500/50'),
		twMerge('bg-slate-200/50'),
		twMerge('to-slate-700/50 from-slate-500/30')
	],
	[
		twMerge('from-red-700/70 to-red-500/50'),
		twMerge('bg-red-200/50'),
		twMerge('to-red-700/50 from-red-500/30')
	],
	[
		twMerge('from-cyan-700/70 to-cyan-500/50'),
		twMerge('bg-cyan-200/50'),
		twMerge('to-cyan-700/50 from-cyan-500/30')
	],
	[
		twMerge('from-lime-700/70 to-lime-500/50'),
		twMerge('bg-lime-200/50'),
		twMerge('to-lime-700/50 from-lime-500/30')
	]
];
const bgThemes = [
	"gray", 
	"rgb(206, 157, 199)",
	"rgb(166, 173, 188)",
	"rgb(174, 161, 19)",
]

const portfolios = [
	{
		id:'san-antonio-korean-school',
		element: SanAntonioKoreanSchool,
		href: "https://sa-korean-school.vercel.app",
		src: "/images/app-screenshots/sakr-home.png"
	},
	{
		id:'dimensional-fund-center',
		element: DimensionalFundCenter,
		href: "https://www.dimensional.com/us-en/funds/dcor/us-core-equity-1-etf",
		src: "/images/app-screenshots/fund-center.png"
	},
	{
		id:'small-business-insurance',
		element: SmallBusinessInsurance,
		href: 'https://www.usaa.com/insurance/small-business',
		src: "/images/app-screenshots/small-business-insurance.png",
	},
	{
		id: 'financial-readiness',
		element: FinancialReadiness,
		href: 'https://mobile.usaa.com/advice/financial-readiness?akredirect=true',
		src: '/images/app-screenshots/usaa-financial-readiness.png',
	}
]


const portfoliosInKr = [
	{
		id:'lightening',
		title: 'Project Bungae (Lightniing) - UAV Operation Panel',
		techStacks: 'C#.Net, Flash/Action Script, XML, TCP/UDP, Serial(RS-232)',
		desc: `A Visualization and control panel for UAV(Unmanned Aviation Vehicle).
		It satisfied Korean Army department for the beautiful animation and smooth visualization.
		Created All the panels and charts with Flash, all number parts with C#.Net panels,
		With realtime data using UDP communication.`,
		src: "/images/app-screenshots/ligntening.png",
		myRole: "Design/Architecture/Development on Client Application",
	},
	{
		id:'global-report',
		title: 'Global Report (Report generation tool)',
		techStacks: 'HTML/CSS/Javascript/C#/PDF',
		desc: `Converting manual reporting process to automated report process
		reducing reporting time dramatically.
		Introducing MV model (Model/View)
		View/Print/PDF generation
		`,
		href: 'https://github.com/wootra/GlobalReporter',
		src: ["/images/app-screenshots/global-report.png", "/images/app-screenshots/global-report2.png", ],
		myRole: 'A-Z, Plan, Introducing MV concept, Architecture, Design, Implement',
	},
	{
		id:'ifcc-dev-test-sw',
		title: 'IFCC Device Test SW',
		techStacks:"C#.Net, Custom components, OpenGL, TCP/UDP, Serial(RS-232/RS-422), Can", 
		desc: `Automated testing software for IFCC device including data integrity, communication, and smoke test.
		Before this software, all test had to be manually created in each project, but this software allowed to skip 
		massive amount of redundant work. It also allowed injecting errors by easy UI, so improved testability dramatically.`,
		src: "/images/app-screenshots/ifcc-testngine.png",
		href: 'https://github.com/wootra/TestNetConnector',
		myRole: `This project started from TestNetConnector which I made to improve manual testability for the team.
		I used a lot of existing logic for this project and ended up as a new product of the company.(https://www.realtimewave.com/machate).
		`,
	},
	{
		id:'testngine-1-0',
		title: 'TestNgine 1.0',
		techStacks: 'C#.Net, WCF, TCP/UDP, C, VxWorks(RTOS), Python(for loop), XML',
		desc: `Connecting with high-powered Realtime OS(VxWorks), this application allowed creation, edit, and execution of dynamic testing scenarios by easy accessible UI.
		Also allowing multi-depth scenario managed by XML which made it possible to be modularized.
		PDF, Excel report
		`,
		src: "/images/app-screenshots/testngine1-0.png",
		myRole: 'Initiated the project, Architecture, Implementation'
	},
	{
		id:'igte',
		title: 'IGTE',
		techStacks: 'C#.Net, WCF, TCP/UDP, C, VxWorks(RTOS), XML, MS-SQL',
		desc: `Managing 6-DOF avionics models with database while developing Missiles to boost testing process`,
		src: ["/images/app-screenshots/igte-1.png","/images/app-screenshots/igte-2.png"],
		myRole: 'Client SW development.'
	},
	{
		id:'f1-simulator',
		title: 'F1 Simulator(UAV attack simulator)',
		techStacks: 'MFC',
		desc: `This project is a simple project to make the custom component library I made into a projection level. 
		this project evelved to panel builder project`,
		src: "/images/app-screenshots/f1-sim.png",
		myRole: 'Client SW development, Custom component development'
	},
	{
		id:'smc-ste',
		title: 'SMC-STE Test SW',
		techStacks: 'MFC, XML',
		desc: `This project is an advanced project from F1 simulator and proved the reusability of existing custom components.
		Even though it is not pretty, this allowed customizing testability by placing pre-made custom components
		as well as XML meta data. By accepting idea of this project, Panel Builder project can be started.`,
		src: "/images/app-screenshots/smc-ste.png",
		myRole: 'introducing POC of the reusable components mixing with XML meta data'
	},
	{
		id:'scenario-maker',
		title: 'Scenario Maker',
		techStacks: 'MFC, C, VxWorks',
		desc: `improving TestNgine 1.0, this project enhanced real-time testability, timeline-based timing configuration, 
		and low-level structure generator to parse data into C struct.`,
		src: "/images/app-screenshots/scenario-maker.png",
		href: 'https://www.realtimewave.com/systembridge',
		myRole: `Client development, Embedded code architecuture and leading, and Development of embedeed core module. 
		Giving the motivation of System Bridge(https://www.realtimewave.com/systembridge)`
	},
	{
		id:'panel-builder',
		title: 'Panel Builder(beta, 0.5)',
		techStacks: 'MFC, XML, OpenGL, LUA, BCG Library, Air manager library',
		desc: `Allow generation of hardware control/visualization dashboard.`,
		src: "/images/app-screenshots/panel-builder-beta.png",
		href: 'https://www.realtimewave.com/rpb',
		myRole: 'Initiated panel builder project.'
	},
	{
		id:'active-sonar-simulator',
		title: 'Active Sonar TX/RX Simulator',
		techStacks: 'C++, Lab Windows/CVI, FFT algorithm',
		desc: `simulate active sonar server to test initial stage of sonar development.
		this software generated multiple frequency of wave, coding and decoding of frequency using FFT algorithm.`,
		src: "/images/app-screenshots/active-sonar-sim.png",
		myRole: 'requested to analyze the raw data signal. Analyzed the raw data, parsed the signal to remove header of encryption, generated chart.'
	},
	{
		id:'active-sonar-controller',
		title: 'Active Sonar Test SW',
		techStacks: 'C++, Lab Windows/CVI, FFT algorithm, multi-thread(Intel TBB)',
		desc: `Performed actual testing for active-sonar using this application. 
		Visualization of sonar signals, active status of each sensors, Beam patterns and high resolution frequencies.`,
		src: ["/images/app-screenshots/active-sonar-controller-1.png", "/images/app-screenshots/active-sonar-controller-2.png"],
		myRole: `Tested 40 TX channel and 128 RX channel concurrently powered by IntelTBB multithread API and Intel multi-core CPU.
		Debugged actual hardware issues using this software.`
	},
	
];
---
<AppLayout title="home" backText='Home' backUrl='/'>
	<div class="w-[100vw] min-h-[100vh] flex flex-col snap-y snap-mandatory">
		
		{portfolios.map((item, idx)=>{
			const {id, element:Element, href, src} = item;
			const bgColor = bgThemes[idx% bgThemes.length];
			const colorTheme = colorThemes[idx % colorThemes.length];
			const before = idx === 0? undefined : `#${portfolios[idx-1].id}`;
			const after = idx === portfolios.length-1 ? `#${portfoliosInKr[0].id}` : `#${portfolios[(idx+1)].id}`;
			return (
				<ContentHolder
					anchorId={id}
					classNames={colorTheme}
					before={before}
					after={after}
					bgColor={bgColor}
					bgImage="/images/nasa-star-night.jpg"
				> 
					<heading slot="location" class="absolute left-4 top-4 text-sm text-white/40">@US</heading>
					{
						idx === 0 && <Nav slot="nav-area" className="absolute pl-[2rem] top-0 right-0 rounded-bl-[3rem] bg-white/30 z-50 py-2"/>
					}
					<Element />
					{href && src && (
						<a href={href} target="_blank" slot="image-area" >
							<img alt="profile" loading="lazy" src={src} class="flex-shrink rounded-lg max-w-[400px] max-h-[400px] w-full lg:h-auto h-auto px-4 aspect-1 object-contain" />
						</a>
					)}
				</ContentHolder>
			)
		})}
		{portfoliosInKr.map((item, idx)=>{
			const {id, src, title, desc, techStacks, myRole, href} = item;
			const bgColor = bgThemes[idx% bgThemes.length];
			const colorTheme = colorThemes[idx % colorThemes.length];
			const before = idx === 0? undefined : `#${portfoliosInKr[idx-1].id}`;
			const after = idx === portfoliosInKr.length-1 ? `#${portfolios[0].id}` : `#${portfoliosInKr[(idx+1)].id}`; 
			return (

				<ContentHolder
					anchorId={id}
					classNames={colorTheme}
					before={before}
					after={after}
					bgColor={bgColor}
					bgImage="/images/game-back.jpg"
				> 
				<heading slot="location" class="absolute left-4 top-4 text-sm text-white/40">@KR</heading>
					<PortfolioLayout>
						<h1 class="text-3xl flex flex-row gap-2">
							{title}
						</h1>

						<section>
							<h2 class="text-lg text-slate-300">Tech stacks</h2>
							<MultiLineParagraph className="text-sm">{techStacks}</MultiLineParagraph>
						</section>
						
						<section class="text-sm">  
							<h2 class="text-lg text-slate-300">Description</h2>
							<MultiLineParagraph className="text-sm">{desc}</MultiLineParagraph>
						</section>
						
						<section class="text-sm">  
							<h2 class="text-lg text-slate-300">My Role</h2>
							<MultiLineParagraph className="text-sm">{myRole}</MultiLineParagraph>
						</section>
							
					</PortfolioLayout>
					<ImageLinkRenderer slot="image-area" href={href} src={src} />
				</ContentHolder>
			)
		})}
	</div>
</AppLayout>